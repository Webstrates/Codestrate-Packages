<div class="section section-visible" name="Remote Cursors" data-type="package" data-group="basic" data-id="XmZFpkT7" transient-focussed="true"><div class="paragraph body-paragraph locked collapsed" name="Documentation" data-id="R7n9mXrD"><div data-type="content" type="text/html" codemirror="true" contenteditable="false" class="section-documentation"><h2>Description</h2><div>Adds the functionality to see cursors of other people on a codestrate.</div></div></div><div class="paragraph data-paragraph locked collapsed" name="Properties" data-id="auHPMEdC"><pre data-type="content" type="application/json" class="section-properties" contenteditable="false">{
	"version": "1.0",
	"icon": "keyboard_return",
	"assets": [],
	"dependencies": [],
	"description": "Adds the functionality to see cursors of other people on a codestrate.",
	"changelog":
	{
		"1.0": "Initital Release"
	},
	"github": {
		"url": "https://github.com/Webstrates/Codestrate-Packages",
		"folder": "collaboration/remote-cursors"
	}
}</pre></div>

<div class="paragraph code-paragraph collapsed" name="Levenshtein" run-on-load="true" last-execution-state="success" draggable="false" data-id="M7kDfXK2"><pre data-type="content" type="text/javascript">String.prototype.levenshtein = function(b) {
	a = this;
	if (a.length === 0) return b.length; 
	if (b.length === 0) return a.length;

	// Swap to save some memory O(min(a,b)) instead of O(a) what do you think of my coding?
	if (a.length &gt; b.length) {
		var tmp = a;
		a = b;
		b = tmp;
	}

	var row = [];

	// Init the row
	for (var i = 0; i &lt;= a.length; i++){
		row[i] = i;
	}

	// fill in the rest
	for (var i = 1; i &lt;= b.length; i++){
		var prev = i;
		for (var j = 1; j &lt;= a.length; j++){
			var val;
			if (b.charAt(i-1) == a.charAt(j-1)){
				val = row[j-1]; // Match
			} else {
				val = Math.min(row[j-1] + 1, // Substitution
											 prev + 1,     // Insertion
											 row[j] + 1);  // Deletion
			}
			row[j - 1] = prev;
			prev = val;
		}
		row[a.length] = prev;
	}

	return row[a.length];
};</pre></div><div class="paragraph code-paragraph collapsed" draggable="false" last-execution-state="success" name="Remote Cursors Utils" data-id="ZxiHZbSb"><pre data-type="content" type="text/javascript" id="remote-cursor-utils">// Function used to find a textnode in the children of a node that's most like the string given
const findClosestTextNode = (parent, str) =&gt; {
	// If there's only one textnode return that.
	var textNodes = [];
	for (var i = 0; i&lt;parent.childNodes.length; i++) {
		if (parent.childNodes[i].nodeType !== 3) continue;
		textNodes.push(parent.childNodes[i]);
	}
	if (textNodes.length === 1) return textNodes[0];

	// Lets see if there's one of them that's very close in length
	var closeCount = 0;
	var close;
	for (var i = 0; i&lt;textNodes.length; i++) {
		if (Math.abs(str.length -  textNodes[i].textContent.length) &lt;= 3) {
			closeCount++;
			close = textNodes[i];
		}
	}
	if (closeCount == 1) return close;

	// Else we have to find the one that's closest to the one given
	// (This is pretty slow...)
	var closest;
	var minLev = Infinity;
	for (var i = 0; i&lt;textNodes.length; i++) {
		var lev = textNodes[i].textContent.levenshtein(str);
		if (lev &lt; minLev) {
			closest = textNodes[i];
			minLev = lev;
		}
	}
	return closest;
};

const findNodeFromWID = (wid) =&gt; {
	var allElements = document.querySelectorAll("*");
	for (var i = 0; i&lt;allElements.length; i++) {
		if (allElements[i].webstrate &amp;&amp; allElements[i].webstrate.id == wid) {
			return(allElements[i]);
		}
	}

};

const findTextNodeFromWIDandString = (wid, str) =&gt; {
	var parent = findNodeFromWID(wid);
	if (parent === null || parent === undefined) return null;
	return findClosestTextNode(parent, str);
};

exports.findClosestTextNode = findClosestTextNode;
exports.findNodeFromWID = findNodeFromWID;
exports.findTextNodeFromWIDandString = findTextNodeFromWIDandString;</pre></div>
<div class="paragraph code-paragraph collapsed" draggable="false" run-on-load="true" last-execution-state="success" name="Remote Cursors" data-id="dsGvJuyb"><pre data-type="content" type="text/javascript">const ClientManager = require('#client-manager');

const {
	findClosestTextNode,
	findNodeFromWID,
	findTextNodeFromWIDandString
} = require('#remote-cursor-utils');

// Get the display name from the user object, if the user is not logged in use anonymous
var displayName = webstrate.user ? webstrate.user.displayName : "Anonymous";

// Keeps track of all current cursor elements.
var clientCursors = {};

// Keeps track of the last cursor signal received from a client
var lastSignals = {};

// Keeps track of the last selection.
var lastSelection;

// Run through clients already connected and create their cursors
for (var i = 0; i&lt;webstrate.clients.length; i++) {
	addClient(webstrate.clients[i]);
}

// When a client joins create a cursor element and send your selection
webstrate.on("clientJoin", function(clientId) {
	if (clientId == webstrate.clientId) return;
	addClient(clientId);
	signalSelection(lastSelection);
});


// When a client leaves we delete its cursor
webstrate.on("clientPart", function(clientId) {
	if (clientCursors[clientId] &amp;&amp; clientCursors[clientId].parentElement) {
		clientCursors[clientId].parentElement.removeChild(clientCursors[clientId]);    
	}
	delete clientCursors[clientId];
	delete lastSignals[clientId];
});

// When the window resizes redraw the cursors based on the last cursor signal received from the other clients.
window.addEventListener("resize", function() {
	var clients = Object.keys(lastSignals);
	for (var i = 0; i&lt;clients.length; i++) {
		drawCursor(lastSignals[clients[i]], clients[i]);
	}
});

// Timer used to send an extra signal when interaction stops
var signalTimeout;
var lastSignal;

// Compose a message based on the selection and send it off
var signalSelection = function(selection) {
	if (!selection) return;
	var msg = {
		cmd: "remote-cursor"
	};

	// We have to send the WID of the anchor, extent and focus node. We also send the text of the nodes
	// Because we need it to find the proper text node on the other side. 
	// As soon as text nodes will have WIDs we will not need to do this.
	msg.anchorNode = selection.anchorNode.nodeType == 3 ? selection.anchorNode.parentNode.webstrate.id : selection.anchorNode.webstrate.id;
	msg.extentNode = selection.extentNode.nodeType == 3 ? selection.extentNode.parentNode.webstrate.id : selection.extentNode.webstrate.id;
	msg.focusNode = selection.focusNode.nodeType == 3 ? selection.focusNode.parentNode.webstrate.id : selection.focusNode.webstrate.id;
	msg.anchorOffset = selection.anchorOffset;
	msg.extentOffset = selection.extentOffset;
	msg.focusOffset = selection.focusOffset;
	msg.anchorText = selection.anchorNode.nodeType == 3 ? selection.anchorNode.textContent : null;
	msg.extentText = selection.extentNode.nodeType == 3 ? selection.extentNode.textContent : null;
	msg.focusText = selection.focusNode.nodeType == 3 ? selection.focusNode.textContent : null;
	msg.type = "selectionchanged";
	msg.anchorNodeType = selection.anchorNode.nodeType;
	msg.extentNodeType = selection.extentNode.nodeType;
	msg.focusNodeType = selection.focusNode.nodeType;
	msg.displayName = displayName;
	document.body.webstrate.signal(msg);
	// To make sure that the signal to move the cursor doesn't arrive before the edit done to the text,
	// We send an extra signal after waiting 50ms
	lastSignal = msg;

	if (signalTimeout) clearTimeout(signalTimeout);
	signalTimeout = setTimeout(function() {
		document.body.webstrate.signal(lastSignal);
	}, 50);
};

// When selection change, get it and send it
document.addEventListener("selectionchange", function(event) {
	lastSelection = getSelection();

	// only signal body paragraphs
	let anchorNode = lastSelection.anchorNode;
	if (
		anchorNode &amp;&amp;
		anchorNode.parentElement.closest('.paragraph.body-paragraph') &amp;&amp;
		anchorNode.parentElement.closest('[data-type="content"][contenteditable="true"]')
	) {
		signalSelection(lastSelection);	
	}
});


// Handles when we receive a signal
document.body.webstrate.on("signal", function(msg, clientId) {
	// If the client doesn't have a cursor return.
	if (msg.cmd !== "remote-cursor" || !clientCursors[clientId]) return;
	lastSignals[clientId] = msg;
	drawCursor(msg, clientId);
});

function drawCursor(msg, clientId) {
	// Now we have to find the anchor and focus from the WIDs in the signal
	// As textNodes currently have no WIDs we have to do some ugly stuff that I've parked in the levenshtein script
	var anchor, focus;
	if (msg.anchorNodeType === 3) {
		anchor = findTextNodeFromWIDandString(msg.anchorNode, msg.anchorText);
	} else {
		anchor = findNodeFromWID(msg.anchorNode);
	}
	if (msg.focusNodeType === 3) {
		focus = findTextNodeFromWIDandString(msg.focusNode, msg.focusText);
	} else {
		focus = findNodeFromWID(msg.focusNode, msg.focusText);
	}
	if (!anchor || !focus) return; // No nodes !

	// We check the order of the anchor and focus (to see if it is a backwards selection)
	try {
		var preceding = (anchor.compareDocumentPosition(focus) == 4) || (anchor.compareDocumentPosition(focus) === 0 &amp;&amp; msg.focusOffset &gt; msg.anchorOffset);
	} catch (err) {
		return;  
	}

	// If its a backwards selection we switch. This can throw an exception if anchor and focus are the same.
	var range = document.createRange();
	try {
		if (preceding) {
			range.setStart(anchor, msg.anchorOffset);
			range.setEnd(focus, msg.focusOffset);
		} else {
			range.setStart(focus, msg.focusOffset);
			range.setEnd(anchor, msg.anchorOffset);          
		}
	} catch (err) {
		return;  
	}
	// If the cursor is already somewhere in the document we detach it from its parent
	if (clientCursors[clientId].parentElement) clientCursors[clientId].parentElement.removeChild(clientCursors[clientId]);
	// Get the rects from the newly created range
	var allRects = range.getClientRects();
	// Prune out rects from elements with display block (fills the whole width of the screen)
	var rects = [];
	for (var i = 0; i&lt;allRects.length; i++) {
		if (allRects[i].width !== window.innerWidth) rects.push(allRects[i]);        	
	}

	// If there's no rects in the range we create one that can be used for the cursor.
	// We use the left side of the anchor node to do this.
	if (rects.length === 0) {
		if (!anchor.getBoundingClientRect) return; // The anchor is a text node, we shouldn't be here. Perhaps the content has display: none.
		var anchorBounds = anchor.getBoundingClientRect();
		anchorBounds = {left: anchorBounds.left, right: anchorBounds.left, top: anchorBounds.top, bottom: anchorBounds.bottom, height: anchorBounds.height, width: 0};
		rects.push(anchorBounds);
	}
	// Now we insert the cursor just before the anchornode
	anchor.parentElement.insertBefore(clientCursors[clientId], anchor);
	var cursorBounds = clientCursors[clientId].getBoundingClientRect();
	var rectsDiv = clientCursors[clientId].querySelector(".rects");
	// We clear the rects of the cursor
	rectsDiv.innerHTML = "";
	// Generate a div for each of the rects in the range
	for (var i = 0; i&lt;rects.length; i++) {
		var rect = document.createElement("div");
		rect.style.position = "absolute";
		rect.style.left = rects[i].left - cursorBounds.left + "px";
		rect.style.top = rects[i].top - cursorBounds.top + "px";
		rect.style.width = rects[i].width + "px";
		rect.style.height = rects[i].height + "px";
		rect.setAttribute("class", "rect");
		rect.style.backgroundColor = ClientManager.getClientColor(clientId);
		rect.style.borderColor = ClientManager.getClientColor(clientId);
		rectsDiv.appendChild(rect);
	}
	// At the end we place "the cursor" that is a vertical bar that also includes the display name
	var endRect = rects[rects.length-1];
	var cursorEnd = clientCursors[clientId].querySelector(".end");
	var displayName = clientCursors[clientId].querySelector(".displayName");
	displayName.innerText = msg.displayName;
	cursorEnd.style.position = "absolute";
	cursorEnd.style.left = endRect.right - cursorBounds.right + "px";
	cursorEnd.style.top = endRect.top - cursorBounds.top + "px";
	cursorEnd.style.height = endRect.height + "px";
	cursorEnd.setAttribute("class", "end");
	cursorEnd.style.backgroundColor = ClientManager.getClientColor(clientId);
	cursorEnd.style.borderColor = ClientManager.getClientColor(clientId);

}

function addClient(clientId) {

	// If the client is this one, return.
	if (clientId == webstrate.clientId) return; 

	// Get user's color
	var color = ClientManager.getClientColor(clientId);

	// Create the main cursor element
	var cursor = document.createElement("transient");

	// Create the end of the cursor (what's shown if nothing is selected
	var cursorEnd = document.createElement("div");

	// Create the element for the display name
	var displayName = document.createElement("div");
	displayName.setAttribute("class", "displayName");
	displayName.style.backgroundColor = color;
	cursorEnd.appendChild(displayName);
	cursorEnd.setAttribute("class", "end");
	cursor.setAttribute("class", "cursor");
	cursor.style.backgroundColor = color;
	cursor.setAttribute("data-clientid", clientId);
	cursor.setAttribute("contenteditable", "false");

	// Create the element containing the rects for selection
	var rects = document.createElement("div");
	rects.setAttribute("class", "rects");
	cursor.appendChild(rects);
	cursor.appendChild(cursorEnd);
	clientCursors[clientId] = cursor;

	// When we mouse over the cursor we want the display name to show (and then hide after a while
	// through CSS)
	cursor.addEventListener("mouseover", function() {
		// Easiest way to retrigger an animation is to clone and replace the node
		var clone = displayName.cloneNode(true);
		displayName.parentNode.replaceChild(clone, displayName);
		displayName = clone;
	});

	Codestrate.on("clientUpdateProperty", ({ client, propertyName }) =&gt; {
		if (propertyName === "color") {
			displayName.style.backgroundColor = client.color;
		}
	});
}</pre></div><div class="paragraph style-paragraph collapsed" draggable="false" name="Remote Cursors" data-id="q78PZsdu"><style data-type="content" type="text/css" codemirror="true" class="themable">html .client {
	width: 100px;
	height: 1em;
	margin: 1px;
	padding: 1px;
	display: inline-block;
}

html .cursor {
	position: absolute;
	user-select: none;
	pointer-events: none;
}

html .cursor .rect {
	/* lighten when white color font */
	mix-blend-mode: lighten;
}

html .cursor .end {
	opacity: 1.0;
	width: 2px;
}

html .cursor .end .displayName {
	position: absolute;
	padding: 2px;
	white-space: pre;
	top: -100%;
	font-size: 9pt;
	animation: hide 4s ease 1 normal;
	opacity: 0;
	font-weight: bold;
}

@-webkit-keyframes hide {
	0% { opacity: 1; }
	80% { opacity: 1; }
	100% { opacity: 0; }
}

html .cursor .rect {
	border-left: none;
}

html .cursor .rect ~ .rect {
	border: none;
}</style></div></div>