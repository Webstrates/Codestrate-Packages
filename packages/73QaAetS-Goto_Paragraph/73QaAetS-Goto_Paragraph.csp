<div class="section section-visible" data-id="73QaAetS" name="Goto Paragraph" data-type="package" transient-focussed="true"><div class="paragraph body-paragraph locked collapsed" data-id="LVsc7BNx" name="Documentation"><div data-type="content" type="text/html" codemirror="true" contenteditable="false" class="section-documentation"><h2>Description</h2><div>Adds a paragraph palette to the codestrate, which enables to search and scroll to paragraphs by their ID or name.</div><h3>Search Options</h3><div>There are three search modes:</div><div><ul><li><b>Name</b>: Searches for a name of a paragraph.</li><li><b>ID</b>: Use the prefix <code>id:</code> to search for the ID of a paragraph.</li><li><b>Paragraph-ID</b>: Use the prefix <code>data-id:</code> to search for the <code>data-id</code> attribute of a paragraph.</li></ul></div><h3>Shortcut</h3><div>The shortcut to focus the search is <kbd>Ctrl</kbd>+<kbd>P</kbd> on Windows and <kbd>Cmd</kbd>+<kbd>P</kbd> on macOS.</div></div></div><div class="paragraph data-paragraph locked collapsed" data-id="xtYuvXdc" name="Properties"><pre data-type="content" type="application/json" class="section-properties" contenteditable="false">{
	"version": "2.0.1",
	"icon": "search",
	"description": "Adds a paragraph palette to the codestrate.",
	"tags": [
		"devtools"
	],
	"dependencies": [],
	"assets": [],
	"changelog":
	{
		"2.0.1": "Small fix for empty searches.",
		"2.0": "Converted to palette and used Commands API.",
		"1.0.3": "Updated to use cmd key on macOS.",
		"1.0.2": "Tag added.",
		"1.0.1": "Style only on toolbar active.",
		"1.0": "Initital Release"
	},
	"github": {
		"url": "https://github.com/Webstrates/Codestrate-Packages",
		"folder": "packages/73QaAetS-Goto_Paragraph"
	}
}</pre></div><div class="paragraph code-paragraph collapsed" data-id="gRzxdfcE" name="Goto Paragraph Code" last-execution-state="success" run-on-load="true"><pre data-type="content" type="text/javascript">const PaletteUtils = require("#palette-utils");

/******************************************************************************/

const getLabel = (sec, par) =&gt; `${sec} &gt; ${par}`;

const getListElement = (section, paragraph) =&gt; {
	return {
		label: getLabel(section.getAttribute("name"), paragraph.getAttribute("name")),
		value: `data-id:${paragraph.getAttribute("data-id")}`
	};
};

const action = (text) =&gt; {
	let paragraph;
	let content;

	if (text === "") {
		return;
	} else if (text.startsWith("data-id:")) {
		const dataId = text.substring(8);
		paragraph = document.querySelector(`.paragraph[data-id="${dataId}"]`);
		if (paragraph) content = paragraph.querySelector("[data-type='content']");

	} else if (text.startsWith("id:")) {
		const id = text.substring(3);
		content = document.querySelector(`#${id}[data-type="content"]`);
		if (content) paragraph = content.closest(".paragraph");

	} else {
		paragraph = document.querySelector(`.paragraph[name="${text}"]`);
		if (paragraph) content = paragraph.querySelector("[data-type='content']");
	}

	if (!paragraph || !content) {
		alert(`The paragraph "${text}" wasn't found.`, "Paragraph Not Found");
	} else {
		const section = paragraph.closest(".section");

		if (section) {
			section.classList.remove("section-hidden");
			section.classList.remove("collapsed");
			section.classList.add("section-visible");
		}

		paragraph.classList.remove("collapsed");

		Codestrate.simulateClick(paragraph);

		setTimeout(false, 0);
		paragraph.scrollIntoView({block: "start", behavior: "instant"});
		window.scrollBy(0, -74);
	}
};

/******************************************************************************/

const gotoParagraphPalette = PaletteUtils.addPalette(
	"goto-paragraph-palette", "label", "Paragraph",
	action, [],
	"gotoParagraph.togglePalette", "Goto Paragraph", "Opens the goto paragraph palette.",
	"mod+p", true);

/******************************************************************************/

document.liveQuerySelectorAll(".paragraph").added((paragraph) =&gt; {
	const section = paragraph.closest(".section");

	const listElement = getListElement(section, paragraph);

	gotoParagraphPalette.__addListElement(listElement);

	section.liveAttribute("name").changed((value, oldValue) =&gt; {
		listElement.label = getLabel(value, paragraph.getAttribute("name"));
	});

	paragraph.liveAttribute("name").changed((value, oldValue) =&gt; {
		listElement.label = getLabel(section.getAttribute("name"), value);
	});
});

document.liveQuerySelectorAll(".paragraph").removed((paragraph) =&gt; {
	const listElement = gotoParagraphPalette.__getList().find(el =&gt; el.value === `data-id:${paragraph.getAttribute("data-id")}`);
	gotoParagraphPalette.__removeListElement(listElement);
});</pre></div></div>