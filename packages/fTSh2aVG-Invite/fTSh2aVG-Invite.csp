<div class="section section-visible" name="Invite" data-group="basic" data-type="package" data-id="fTSh2aVG" transient-focussed="true"><div class="paragraph body-paragraph locked collapsed" name="Documentation" data-id="WnFasvew"><div data-type="content" type="text/html" codemirror="true" contenteditable="false" class="section-documentation"><h2>Description</h2><div>Adds the functionality to invite other people to a codestrate.</div></div></div><div class="paragraph data-paragraph locked collapsed" name="Properties" data-id="ac7xbVfV" style=""><pre data-type="content" type="application/json" class="section-properties" contenteditable="false">{
	"version": "1.1",
	"icon": "person_add",
	"description": "Adds the functionality to invite other people to a codestrate.",
	"tags": [
		"collaboration"
	],
	"assets": [],
	"dependencies": [
		{
			"id": "4MdLqZhf",
			"name": "Toast Messages"
		}
	],
	"changelog":
	{
		"1.1": "Fixed entry in global menu.",
		"1.0": "Initial Release"
	},
	"github": {
		"url": "https://github.com/Webstrates/Codestrate-Packages",
		"folder": "packages/fTSh2aVG-Invite"
	}
}</pre></div>

<div class="paragraph body-paragraph locked collapsed" style="" data-id="yAiQEXg3" name="Invitation Template"><div data-type="content" type="text/html" codemirror="true" contenteditable="false" id="invitation"><div class="invite">
  <div class="user">
    <div class="avatar" style="background-image: url(&quot;unknown.jpg&quot;);"></div>
    <div class="username">Ano Nymous</div>
  </div>
  <div class="content">
    <div class="subject">Subject</div>
    <div class="message">Message</div>
  </div>
</div>

<template id="invite-template">
	<div class="invite">
		<div class="user">
			<div class="avatar" style="background-image: url(&quot;unknown.jpg&quot;);"></div>
			<div class="username">Ano Nymous</div>
		</div>
		<div class="content">
			<div class="subject">Subject</div>
			<div class="message">Message</div>
		</div>
	</div>
</template></div></div><div class="paragraph code-paragraph collapsed" style="" run-on-load="true" last-execution-state="success" name="Add invite to Global Menu" draggable="false" data-id="CkAQMwqs"><pre data-type="content" type="text/javascript">const GlobalMenuUtils = require('#global-menu-utils');

// Invite template
const inviteTemplate = document.querySelector('#invite-template');

webstrate.off("messageReceived");
webstrate.on("messageReceived", (message, senderId, messageId) =&gt; {
	if (message.__class__ === "codestrate" &amp;&amp; message.type === "invite") {
		let {
			invite
		} = message;

		let fragment = document.importNode(inviteTemplate.content, true);

		let avatarElement = fragment.querySelector('.avatar');
		let usernameElement = fragment.querySelector('.username');
		let subjectElement = fragment.querySelector('.subject');
		let messageElement = fragment.querySelector('.message');

		avatarElement.style.backgroundImage = `url(${invite.avatarUrl || 'unknown.jpg'})`;
		avatarElement.style.borderColor = invite.userColor;
		usernameElement.innerHTML = invite.username;
		subjectElement.innerHTML = "Invitation";
		messageElement.innerHTML = `${invite.username} invites you to a codestrate. Click on &lt;a href="/${invite.webstrateId}/"&gt;this&lt;/a&gt; link to open the codestrate!`;

		toastMessage(fragment);
	}
});

GlobalMenuUtils.addButton("Invite to Codestrate", false, event =&gt; {
	(async() =&gt; {
		let receiver = await prompt("Send invite to a user or multiple users (comma separated list of user ids):", "", "Invite to Codestrate");
		if (receiver) {
			let receivers = receiver.split(',');

			// get client color
			let ClientManager = require('#client-manager');
			let client = ClientManager.getClient();

			let username = webstrate.user.displayName || webstrate.user.username;
			let avatarUrl = webstrate.user.avatarUrl;
			let userColor = client.color;
			let webstrateId = webstrate.webstrateId;

			webstrate.message({
				__class__: "codestrate",
				type: "invite",
				invite: {
					username,
					avatarUrl,
					userColor,
					webstrateId
				}
			}, receivers);
			toast(`Invited user "${receiver}"`);
		}
	})();
});

GlobalMenuUtils.addDivider();</pre></div><div class="paragraph style-paragraph collapsed" draggable="false" style="" name="Invitation Style" data-id="UWmGSTWG"><style data-type="content" type="text/css" codemirror="true">#invitation {
	color: black;
	background-color: white;
}

.invite {
	display: flex;
}

.invite .user {
	display: flex;
	flex-direction: column;
	align-items: center;
}

.invite .user .avatar {
	box-sizing: border-box;
	width: 50px;
	height: 50px;
	border-radius: 50%;
	background-size: contain;
	border: 2px solid white;
	border-color: hotpink;
	box-shadow: 0 0 5px black;
}

.invite .user .username {
	font-size: .6em;
}

.invite .content {
	margin-left: 15px;
}

.invite .content .subject {
	font-weight: bold;
}

.invite .content .message {
}</style></div></div>