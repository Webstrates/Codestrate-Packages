<div name="Avatars" data-type="package" class="section section-visible" data-group="basic" data-id="USSKFQPD" transient-focussed="true"><div class="paragraph body-paragraph locked collapsed" draggable="false" name="Documentation" data-id="rVwMQEUm"><div data-type="content" type="text/html" codemirror="true" contenteditable="false" class="section-documentation"><h2>Description</h2><div>Displays an avatar in the bottom right corner for every user on a Codestrate. Clicking on the avatar will flash the screen on the other users Codestrate.</div></div></div><div class="paragraph data-paragraph locked collapsed" name="Properties" data-id="7kcnKK3R"><pre data-type="content" type="application/json" class="section-properties" contenteditable="false">{
	"version": "1.0.3",
	"icon": "account_circle",
	"description": "Displays an avatar in the bottom right corner for every user on a Codestrate.",
	"tags": [
		"collaboration"
	],
	"assets": [],
	"dependencies": [],
	"changelog":
	{
		"1.0": "Initital Release",
		"1.0.1": "Some styling and description.",
		"1.0.2": "Fixed issue with Codestrate.on event API, which was @deprecated and use Codestrate.addEventListener instead.",
    "1.0.3": "Added style for notification bar."
	},
	"github": {
		"url": "https://github.com/Webstrates/Codestrate-Packages",
		"folder": "packages/USSKFQPD-Avatars"
	}
}</pre></div>

<div class="paragraph body-paragraph collapsed" draggable="false" name="Documentation and Example Rendering" data-id="BqxeuLNK"><div data-type="content" type="text/html" codemirror="true" contenteditable="true"><h2>Example of user list<br></h2>

<div class="avatars-test">
	<div class="avatar" client-id="test3" username="unknown" style="background-image: url(&quot;unknown.jpg&quot;); border-color: rgb(99, 178, 252);"></div>

	<div class="avatar" client-id="test2" username="cklokmose" style="background-image: url(&quot;https://avatars.githubusercontent.com/u/1607207?v=3&quot;); border-color: rgb(254, 83, 124);"></div>

	<div class="avatar self" client-id="test1" username="raedle" style="background-image: url(&quot;https://avatars.githubusercontent.com/u/489051?v=3&quot;); border-color: rgb(226, 178, 252);"></div>
</div></div></div><div class="paragraph code-paragraph collapsed" name="Avatars Code" run-on-load="true" last-execution-state="success" data-id="QSCmBY4t"><pre data-type="content" type="text/javascript">const ClientManager = require('#client-manager');
const FlashScreen = require('#flash-screen');

const anonymousUrl = "unknown.jpg";

// How often the idle time is updated (in milliseconds)
const UPDATE_IDLE_TIME_INTERVAL = 10 * 1000;

// Add avatars element
const avatars = document.createElement("transient");
avatars.classList.add("avatars");
document.body.appendChild(avatars);

/**
 * Get other client ids (all connected client ids except for own client id).
 */
const otherClientIds = () =&gt; {
	return webstrate.clients.filter(c =&gt; c !== webstrate.clientId);
};

/**
 * Add a client's avatar to the avatars list.
 */
const addAvatar = (client) =&gt; {

	if (avatars.querySelector(`.avatar[client-id=${client.id}]`)) return;

	const avatar = document.createElement("div");
	avatar.classList.add("avatar");
	avatar.setAttribute("client-id", client.id);
	avatar.setAttribute("username", client.username || client.id);
	avatar.style.backgroundImage = `url(${client.avatarUrl})`;
	avatar.style.borderColor = ClientManager.getClientColor(client.id);

	// Send flash screen command to sender
	avatar.addEventListener("click", (event) =&gt; {
		webstrate.signal({
			cmd: "flashScreen"
		}, client.id);
	});

	if (client.id === webstrate.clientId) {
		avatar.classList.add("self");
		avatars.insertBefore(avatar, avatars.firstElementChild);
	} else {
		avatars.appendChild(avatar);
	}
};

/**
 * Update a client's avatar
 */
const updateAvatar = (client) =&gt; {
	const avatar = avatars.querySelector(`.avatar[client-id="${client.id}"]`);
	if (avatar) {
		avatar.setAttribute("username", client.username || client.id);
		avatar.style.backgroundImage = `url(${client.avatarUrl})`;
		avatar.style.borderColor = ClientManager.getClientColor(client.id);
	}
};

/**
 * Removes an avatar from the avatars list.
 *
 * @param {string} clientId The client's id associated with the avatar.
 */
const removeAvatar = (client) =&gt; {
	stopUpdateIdleTime(client.id);

	const avatar = avatars.querySelector(`.avatar[client-id="${client.id}"]`);
	if (avatar) {
		avatar.remove();
	}
};

const updateIdleTime = (senderId, idleTime) =&gt; {

	// console.log(senderId, idleTime);

	const avatar = avatars.querySelector(`.avatar[client-id="${senderId}"]`);

	if (!avatar) {
		// console.warn(`Client ${senderId} keeps pinging but avatar does not exist anymore... Why?`);
		return;
	}

	var snoozeBox = avatar.querySelector(".snooze");
	if (idleTime &gt; 0) {
		avatar.classList.add("snoozed");
		if (!snoozeBox) {
			snoozeBox = document.createElement("div");
			snoozeBox.classList.add("snooze");
			avatar.appendChild(snoozeBox);
		}
		snoozeBox.innerHTML = `${(idleTime/1000/60)|0}m`;
	} else if (snoozeBox) {
		avatar.classList.remove("snoozed");
		snoozeBox.remove();
	}
};

const idleClients = [];

const stopUpdateIdleTime = (clientId) =&gt; {
	
	// Clear update interval
	const clients = idleClients.filter((c) =&gt; c.clientId === clientId).forEach((c) =&gt; clearInterval(c.interval));
};

/**
 * Clear all update idle timers.
 */
const clearUpdateIdleTimers = () =&gt; {
	idleClients.forEach((c) =&gt; clearInterval(c.interval));
};

/**
 * Listen for other client to signal their avatar url.
 */
webstrate.on("signal", (message, senderId) =&gt; {

	if (message.type === "IdleTimer") {
		// console.log(message, senderId);

		if (message.cmd === "awake") {
			stopUpdateIdleTime(senderId);
			updateIdleTime(senderId, 0);
		} else if (message.cmd === "idle") {

			const lastAction = Date.now() - message.idleTime;

			updateIdleTime(senderId, Date.now() - lastAction);
			const interval = setInterval(() =&gt; {
				updateIdleTime(senderId, Date.now() - lastAction);
			}, UPDATE_IDLE_TIME_INTERVAL);

			idleClients.push({
				clientId: senderId,
				interval: interval
			});
		}

		return;
	}

	if (message.cmd === "flashScreen") {

		// Ignore own message -&gt; remove when code is stable
		if (webstrate.clientId === senderId) {
			// throw new Error("This should not happen");
			return;
		}

		// Flash, flash!
		FlashScreen.flash();

		// Show little star next to whoever flashed
		senderAvatar = avatars.querySelector(`.avatar[client-id="${senderId}"]`);
		var div = document.createElement("div");
		div.classList.add("star");
		div.innerHTML = "&amp;#10039;";
		senderAvatar.appendChild(div);
		setTimeout(() =&gt; div.remove(), 5000);
	}
});

// Add existing clients
Codestrate.clients.forEach((client) =&gt; addAvatar(client));

// Add clients added later on
Codestrate.addEventListener("clientAdd", (client) =&gt; addAvatar(client));

// Update avatars
Codestrate.addEventListener("clientUpdate", (client) =&gt; updateAvatar(client));

// Update avatars
Codestrate.addEventListener("clientUpdateProperty", ({propertyName, client}) =&gt; updateAvatar(client));

// Remove leaving clients
Codestrate.addEventListener("clientRemove", (client) =&gt; removeAvatar(client));

// Clear all update idle timers and remove all avatars.
webstrate.on("disconnect", () =&gt; {

	// Clear all update idle timers.
	clearUpdateIdleTimers();

	// Clear all avatars
	avatars.innerHTML = "";
});</pre></div><div class="paragraph style-paragraph collapsed" name="Avatars Style" data-id="ZDQNSSqu"><style data-type="content" type="text/css" codemirror="true" class="themable">html .avatars {
	position: fixed;
	bottom: 16px;
	right: 16px;
  transition: right var(--navigation-transition);
}

html body[transient-notification-pinned="true"] .avatars {
  right: 400px;
}

/* Make the .avatars-test only occupy minimal space */
html .avatars-test {
	float: left;
	position: relative;
	bottom: 16px;
	left: 16px;
}

html .avatars .avatar,
html .avatars-test .avatar {
	box-sizing: border-box;
	position: relative;
	width: 52px;
	height: 52px;
	margin-top: 12px;
	background-size: contain;
	border-radius: 50%;
	border: 2px solid white;
	box-shadow: var(--material-shadow-z6);
	transition: box-shadow var(--navigation-transition);
}

html .avatars .avatar:not(.self):hover,
html .avatars-test .avatar:not(.self):hover {
	box-shadow: var(--material-shadow-z12);
}

html .avatars .avatar.self {
	border: none;
}

html .avatars .avatar:not(.self) {
	cursor: pointer;
}

html .avatars:hover .avatar:after,
html .avatars-test:hover .avatar:after {
	content: attr(username);
	display: inline-block;
	background: #000;
	padding: 2px 6px;
	font-size: 0.8em;
	transform: translate3d(-100%, 10px, 0) translate3d(-10px, 0, 0) rotate(-4deg);
}

html .avatars .avatar > div.star {
	color: var(--color-primary-text);
	position: absolute;
	margin-left: 40px;
	margin-top: 40px;
}

html .avatars .avatar > div.snooze {
	color: #fff;
	font-size: 65%;
	font-weight: bold;
	text-shadow: 1px 1px #000;
	position: absolute;
	margin-left: 53px;
	margin-top: -3px;
}

html .avatars .avatar.snoozed {
	opacity: 0.25;
}

@media only screen and (max-width: 950px) {
	html .avatars {
		display: none;
	}
	/* 	.avatars {
	top: 5px;
	left: 5px;
}
	.avatars .avatar {
	width: 30px;
	height: 30px;
	margin-bottom: 5px;
	border-width: 1px;
}
	.avatars:hover .avatar:after {
	font-size: 60%;
}
	.avatar > div.star {
	font-size: 40%;
	margin-left: 23px;
	margin-top: 23px;
}
	.avatar > div.snooze {
	display: none;
} */
}
@media only screen and (max-width: 875px) {
	html .avatars {
		display: none;
	}
}</style></div><div class="paragraph code-paragraph collapsed" name="Flash Screen Code" last-execution-state="success" data-id="CUrR76Lw"><pre data-type="content" type="text/javascript" id="flash-screen">exports.flash = () =&gt; {
	const overlay = document.createElement("transient");
	overlay.classList.add("flash-overlay");
	setTimeout(() =&gt; overlay.remove(), 200);
	document.body.appendChild(overlay);
};</pre></div><div class="paragraph style-paragraph collapsed" name="Flash Screen Style" data-id="PyhaWPuz"><style data-type="content" type="text/css" codemirror="true">@keyframes pulse {
	0% {
		background: transparent;
	}
	50% {
		background: rgba(255,255,255,.3);
	}
	100% {
		background: transparent;
	}
}

.flash-overlay {
	position: fixed;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	max-width: 100vw;
	max-height: 100vh;
	animation: pulse 0.2s ease-in-out;
}</style></div><div class="paragraph code-paragraph collapsed" name="Idle Time Code" last-execution-state="success" data-id="sx5rdbHz"><pre data-type="content" type="text/javascript" id="idle-time">var lastAction = Date.now();
const updateLastAction = () =&gt; lastAction = Date.now();
//document.addEventListener("keydown", updateLastAction);
document.addEventListener("mousemove", updateLastAction);
document.addEventListener("touchstart", updateLastAction);
exports.get = () =&gt; ((Date.now() - lastAction) / 1000) | 0;</pre></div></div>