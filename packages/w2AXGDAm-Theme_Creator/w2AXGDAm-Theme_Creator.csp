<div class="section section-visible" data-id="w2AXGDAm" name="Theme Creator" data-type="package" transient-focussed="true"><div class="paragraph body-paragraph locked collapsed" data-id="MNx74Vf4" name="Documentation"><div data-type="content" type="text/html" codemirror="true" contenteditable="false" class="section-documentation"><h2>Description</h2><div>Makes it possible to create new theme sections.</div><h2>Themable Style Paragraphs</h2><div>When creating packages or sections, style paragraphs, which should be available in themes, i.e. which describe properties a user should be able to modify in a theme, can be declared "themable" by adding the "themable" class to them. This indicates the Theme Creator, that these should be available in a theme.</div><div>When declaring a stye paragraph as themable, every style selector should begin with "html ". This is because this "html" will be replaced when creating a new theme (see Usage -&gt; Creation of a theme).</div><h2>Usage</h2><h3>Creation of a theme</h3><div>In order to create a new theme, one just has to use the button "Create New Theme" inside the "Themes" submenu of the global menu. This will create a new package with the selected name of the theme. All template paragraphs as well as themable paragraphs will be copied into the new theme. These can then be modified to alter the theme.</div><div>The copied style paragraphs with the "themable" class will be modified in the following way:</div><div><ul><li>The old <code>data-id</code> will be written in a <code>orig-data-id</code> attribute to support later updating of the theme.</li><li>The paragrah will receive a newly generated <code>data-id</code>.</li><li>The <code>themable</code> class will be removed.</li><li>The word <code>html</code> inside the styles will be replaced by <code>html[transient-theme="THEME_NAME"]</code>. So changes to the theme will only be applied when activating the theme.</li></ul></div><h3>Updating a theme</h3><div>If new packages, i.e. new themable paragraphs are added to the Codestrate, it is possible to update a theme by running the "Update Theme" code paragraph within a theme. Updating a theme will perform the following steps:</div><div><ul><li>Add new themable style paragraphs to the theme</li><li>Sort all style paragraphs of the theme</li><li>Update the name of existing style paragraphs</li><li>If the content of a style paragraph of the theme has the attribute "media='none'" it's content will become updated with the current style of the themable style paragraph</li></ul></div><div>Updating works by comparing the <code>orig-data-id</code> of the theme paragraphs with the <code>data-id</code> of the paragraphs with the <code>themable</code> class.</div></div></div><div class="paragraph data-paragraph locked collapsed" data-id="ZLUWA8QH" name="Properties"><pre data-type="content" type="application/json" contenteditable="false" class="section-properties">{
	"version": "1.0.3",
	"icon": "palette",
	"description": "Utility to create new themes.",
	"tags": [
		"themes",
		"devtools",
		"utility"
	],
	"assets": [],
	"dependencies": [],
	"changelog":
	{
		"1.0.3": "Updated the template to make the dependency on this package optional.",
		"1.0.2": "Remove 'persistent' class from style paragraphs.",
		"1.0.1": "Better properties template.",
		"1.0": "Initial version."
	},
	"github": {
		"url": "https://github.com/Webstrates/Codestrate-Packages",
		"folder": "packages/w2AXGDAm-Theme_Creator"
	}
}</pre></div><div class="paragraph code-paragraph collapsed" data-id="quyf8T2R" draggable="false" style="" name="Add Global Menu Entry" run-on-load="true" last-execution-state="success"><pre data-type="content" type="text/javascript" contenteditable="null">const GlobalMenuUtils = require("#global-menu-utils");
const ThemeCreatorCode = require("#theme-creator-code");

/******************************************************************************/

const createThemeButton = GlobalMenuUtils.createButton("Create New Theme", null, event =&gt; {
	ThemeCreatorCode.createTheme();
});

const toggleDefaultThemeButton = GlobalMenuUtils.createButton("Activate Default Theme", null, event =&gt; {
	ThemeCreatorCode.toggleDefaultTheme();
});

/******************************************************************************/

const subMenuName = "Themes";

GlobalMenuUtils.addMenuItemToSubMenu(createThemeButton, subMenuName);
GlobalMenuUtils.addMenuItemToSubMenu(toggleDefaultThemeButton, subMenuName);</pre></div><div class="paragraph code-paragraph collapsed" data-id="y28PtS6c" draggable="false" style="" name="Theme Creator Code"><pre data-type="content" type="text/javascript" id="theme-creator-code" contenteditable="null">const ThemeCreatorLogger = require("#theme-creator-logger");

/******************************************************************************/

exports.createTheme = () =&gt; {
	const dialogTitle = "Create New Theme";
	prompt("Enter a name for the new theme:", "", dialogTitle).then(name =&gt; {
		if (!name) return false;

		const id = Codestrate.util.randomString();

		ThemeCreatorLogger.actionStarted(`${dialogTitle} "${name}" with id "${id}"`);

		// Create section
		const section = document.createElement("div");
		section.classList.add("section");
		section.classList.add("section-visible");
		section.setAttribute("name", name + " Theme");
		section.setAttribute("data-id", id);
		section.setAttribute("data-type", "package");

		// Copy template paragraphs
		const templateContents = document.querySelectorAll(".theme-template[data-type='content']");

		templateContents.forEach(content =&gt; {
			const paragraph = content.parentNode;
			const newParagraph = paragraph.cloneNode(true);
			const newContent = newParagraph.querySelector("[data-type='content']");

			if (newContent.classList.contains("run-on-load")) {
				newContent.classList.remove("run-on-load");
				newParagraph.setAttribute("run-on-load", "true");
			}

			newContent.classList.remove("theme-template");
			const classes = newContent.getAttribute("class").replace(/(-template)/g, "");
			newContent.setAttribute("class", classes);

			newParagraph.setAttribute("data-id", Codestrate.util.randomString());

			let innerHTML = newContent.innerHTML;
			innerHTML = innerHTML.replace(/(THEME_NAME)/g, name);
			newContent.innerHTML = innerHTML.replace(/(THEME_ID)/g, id);

			section.appendChild(newParagraph);
		});

		// Copy themable paragraphs
		const themableContents = document.querySelectorAll(".style-paragraph .themable[data-type='content']");

		themableContents.forEach(content =&gt; {
			const paragraph = content.parentNode;
			const newParagraph = paragraph.cloneNode(true);
			const newContent = newParagraph.querySelector("[data-type='content']");

			newContent.classList.remove("themable");
			newContent.classList.remove("persistent");

			newParagraph.setAttribute("orig-data-id", newParagraph.getAttribute("data-id"));
			newParagraph.setAttribute("data-id", Codestrate.util.randomString());

			const innerHTML = newContent.innerHTML;
			newContent.innerHTML = innerHTML.replace(/(^html)/gm, `html[transient-theme="${name}"]`);

			section.appendChild(newParagraph);
			ThemeCreatorLogger.addedThemable(newParagraph.getAttribute("data-id"),
																			 newParagraph.getAttribute("name"));
		});

		// Add section
		const sections = document.querySelector("#sections");
		sections.appendChild(section);

		ThemeCreatorLogger.actionFinished(`${dialogTitle} "${name}" with id "${id}"`);
	});
};

/******************************************************************************/

exports.toggleDefaultTheme = () =&gt; {
	if (document.documentElement.hasAttribute("transient-theme")) {
		document.documentElement.removeAttribute("transient-theme");
	}
};

/******************************************************************************/

exports.updateTheme = (id, name) =&gt; {
	const dialogTitle = "Update Theme";

	ThemeCreatorLogger.actionStarted(`${dialogTitle} "${name}" with id "${id}"`);

	const section = document.querySelector(`.section[data-id="${id}"]`);
	const currentParagraphs = Array.from(section.querySelectorAll(".paragraph[orig-data-id]"));
	const themableContents = Array.from(document.querySelectorAll(".style-paragraph .themable[data-type='content']"));
	let lastParagraph;

	themableContents.reverse().forEach(content =&gt; {
		const paragraph = content.parentNode;
		const currentParagraph = currentParagraphs.find(currentParagraph =&gt; currentParagraph.getAttribute("orig-data-id") === paragraph.getAttribute("data-id"));

		if (currentParagraph != null) {
			let updated = false;

			if (currentParagraph.getAttribute("name") !== paragraph.getAttribute("name")) {
				currentParagraph.setAttribute("name", paragraph.getAttribute("name"));
				updated = true;
			}

			const currentContent = currentParagraph.querySelector("[data-type='content']");
			if (currentContent.getAttribute("media") === "none") {
				currentContent.innerHTML = content.innerHTML.replace(/(^html)/gm, `html[transient-theme="${name}"]`);
				updated = true;
			}

			section.insertBefore(currentParagraph, lastParagraph);
			lastParagraph = currentParagraph;

			if (updated) {
				ThemeCreatorLogger.updatedThemable(currentParagraph.getAttribute("data-id"),
																					 currentParagraph.getAttribute("name"));
			}
		} else {
			const newParagraph = paragraph.cloneNode(true);
			const newContent = newParagraph.querySelector("[data-type='content']");

			newContent.classList.remove("themable");
			newContent.classList.remove("persistent");

			newParagraph.setAttribute("orig-data-id", newParagraph.getAttribute("data-id"));
			newParagraph.setAttribute("data-id", Codestrate.util.randomString());

			const innerHTML = newContent.innerHTML;
			newContent.innerHTML = innerHTML.replace(/(^html)/gm, `html[transient-theme="${name}"]`);

			section.insertBefore(newParagraph, lastParagraph);
			lastParagraph = newParagraph;
			ThemeCreatorLogger.addedThemable(newParagraph.getAttribute("data-id"),
																			 newParagraph.getAttribute("name"));
		}
	});

	ThemeCreatorLogger.actionFinished(`${dialogTitle} "${name}" with id "${id}"`);
};</pre></div><div class="paragraph code-paragraph collapsed" data-id="aqjCMXYH" draggable="false" style="" name="Theme Creator Logger"><pre data-type="content" type="text/javascript" id="theme-creator-logger" contenteditable="null">exports.logName = "Theme Creator";

/******************************************************************************/

exports.actionStarted = (action) =&gt; {
	Codestrate.persistentLog.info(`${action} started.`, exports.logName);	
};

exports.actionFinished = (action) =&gt; {
	Codestrate.persistentLog.info(`${action} finished.`, exports.logName);	
};

/******************************************************************************/

exports.addedThemable = (id, name) =&gt; {
	Codestrate.persistentLog.log(`Added themable paragraph "${name}" with id "${id}".`, exports.logName);
};

exports.updatedThemable = (id, name) =&gt; {
	Codestrate.persistentLog.log(`Updated themable paragraph "${name}" with id "${id}".`, exports.logName);
};</pre></div><div class="paragraph style-paragraph collapsed" data-id="YDBXCZyM" name="Theme Creator Style"><style data-type="content" type="text/css" codemirror="true">#global-menu .sub-menu[name="Themes"] {
	order: 970;
}</style></div><div class="paragraph body-paragraph locked collapsed" data-id="sA9qY8WD" draggable="false" style="" name="Documentation"><div data-type="content" type="text/html" codemirror="true" contenteditable="false" class="section-documentation-template theme-template"><h2>Description</h2><div>A theme created by the theme creator.</div></div></div><div class="paragraph data-paragraph locked collapsed" data-id="2s4evHXb" draggable="false" style="" name="Properties"><pre data-type="content" type="application/json" class="section-properties-template theme-template" contenteditable="false">{
	"version": "1.0",
	"icon": "palette",
	"description": "A theme created by the theme creator.",
	"assets": [],
	"dependencies": [
		{
			"id": "w2AXGDAm",
			"name": "Theme Creator",
			"optional": true,
			"usage": "The Theme Creator is needed to update themes."
		}
	],
	"changelog":
	{
		"1.0": "Initial version."
	}
}</pre></div><div class="paragraph code-paragraph locked collapsed" data-id="xMWSNbnz" name="Add Global Menu Entry" style="" last-execution-state="success"><pre data-type="content" type="text/javascript" class="theme-template run-on-load" contenteditable="false">const GlobalMenuUtils = require("#global-menu-utils");

/******************************************************************************/

const toggleThemeButton = GlobalMenuUtils.createButton("Toggle THEME_NAME Theme", null, event =&gt; {
	if (document.documentElement.hasAttribute("transient-theme") &amp;&amp;
		  (document.documentElement.getAttribute("transient-theme") === "THEME_NAME")) {
		document.documentElement.removeAttribute("transient-theme");
	} else {
		document.documentElement.setAttribute("transient-theme", "THEME_NAME");
	}
});

/******************************************************************************/

const subMenuName = "Themes";

GlobalMenuUtils.addMenuItemToSubMenu(toggleThemeButton, subMenuName);</pre></div><div class="paragraph code-paragraph locked collapsed" data-id="Cr7BxPYL" name="Update Theme" style=""><pre data-type="content" type="text/javascript" class="theme-template" contenteditable="false">try {
	const ThemeCreatorCode = require("#theme-creator-code");
} catch (e) {
	alert(`You need to install the optional dependency "Theme Creator" (w2AXGDAm) to update themes!`, "Missing Theme Creator");
	return;
}

/******************************************************************************/

ThemeCreatorCode.updateTheme("THEME_ID", "THEME_NAME");</pre></div></div>