<div class="section section-visible" data-id="VxDJJKw9" name="Canvas Objects" data-type="package" transient-focussed="true"><div class="paragraph body-paragraph locked" name="Documentation" data-id="AqHBTqx8"><div data-type="content" type="text/html" codemirror="true" contenteditable="false" class="section-documentation"><h2>Description</h2><div>Allows adding objects to the canvas, which are then transforable (translate, rotate, scale).</div></div></div><div class="paragraph data-paragraph collapsed" name="Properties" data-id="d9ccqLUD"><pre data-type="content" type="application/json" class="section-properties" contenteditable="true">{
  "version": "0.1.1",
  "icon": "transform",
  "description": "Allows adding objects to the canvas, which are then transforable (translate, rotate, scale).",
  "tags": [
    "canvas",
    "objects"
  ],
  "assets": [
    "hammer.min.js",
    "transformer.min.js"
  ],
  "dependencies": [
    {
      "id": "Kw6McUkB",
      "name": "Canvas",
      "optional": false,
      "usage": "Canvas Objects only works with Canvas package."
    }
  ],
  "changelog": {
    "0.1": "Initial version.",
    "0.1.1": "Adapted to changes in context menu"
  },
  "github": {
    "url": "https://github.com/Webstrates/Codestrate-Packages",
    "folder": "packages/VxDJJKw9-Canvas_Objects"
  }
}</pre></div><div class="paragraph code-paragraph collapsed" data-id="DzTgVcuM" name="Canvas Object Utils"><pre data-type="content" type="text/javascript" id="canvas-object-utils">exports.createCanvasObject = (x, y) =&gt; {
	const canvasObject = document.createElement("div");
	canvasObject.classList.add("canvas-object");
	canvasObject.style.transform = `translate3d(${x}px, ${y}px, 0)`;
	return canvasObject;
};</pre></div><div class="paragraph style-paragraph collapsed" data-id="L835z9dK" name="Canvas Object Style"><style data-type="content" type="text/css" codemirror="true">.canvas .canvas-object {
  color: black;
	position: absolute;
}

.canvas:not(.locked) .canvas-object a,
.canvas:not(.locked) .canvas-object img {
	pointer-events: none;
}</style></div><div class="paragraph code-paragraph collapsed" data-id="wTiDLbZZ" run-on-load="true" name="Canvas Object Transformer" last-execution-state="success"><pre data-type="content" type="text/javascript">importLib([
  "hammer.min.js",
  "transformer.min.js"
]).then(() =&gt; {

  const initializeCanvasObject = (canvasObject) =&gt; {
    const canvas = canvasObject.closest('.canvas');

    if (!canvas) {
      throw new Error(`canvas object transformer only works with Canvas package`);
    }

    Transformer.hammerize(canvasObject, {
      enabled: () =&gt; {
        return !canvas.classList.contains("locked");
      }
    });
  };

  const liveSelector = document.liveQuerySelectorAll('.canvas-object');
  liveSelector.added(initializeCanvasObject);
});</pre></div><div class="paragraph code-paragraph collapsed" data-id="zcGBhHnn" run-on-load="true" name="Canvas Object Context Menu Items" last-execution-state="success"><pre data-type="content" type="text/javascript">const AssetUtils = require('#asset-utils');
const CanvasContextMenu = require('#canvas-context-menu');
const CanvasObjectUtils = require('#canvas-object-utils');

const items = [{
  type: "item",
  label: "Add text",
  icon: "text_fields",
  action: (event) =&gt; {
    const canvasObject = CanvasObjectUtils.createCanvasObject(event.x, event.y);
    const element = document.createElement("div");
    element.setAttribute("contenteditable", "true");
    element.innerHTML = "Lorem ipsum";
    canvasObject.appendChild(element);
    event.target.appendChild(canvasObject);
  }
}, {
  type: "item",
  label: "Upload asset",
  icon: "attach_file", // "insert_photo",
  action: (event) =&gt; {
    webstrate.uploadAsset((error, result) =&gt; {
      if (error) {
        alert(error);
        return;
      }

      // result can be a plain asset object or an array of asset objects
      const assets = Array.isArray(result) ? result : [result];

      assets.forEach((asset) =&gt; {
        const canvasObject = CanvasObjectUtils.createCanvasObject(event.x, event.y);
        const element = AssetUtils.getElementFromAsset(asset);
        canvasObject.appendChild(element);
        event.target.appendChild(canvasObject);
      });
    });
  }
}, {
  // menu item to lock canvas
  type: "item",
  label: (event) =&gt; {
    // is components canvas locked
    const isCanvasLocked = event.target.classList.contains("locked");
    return isCanvasLocked ? "Unlock canvas" : "Lock canvas";
  },
  icon: (event) =&gt; {
    // is components canvas locked
    const isCanvasLocked = event.target.classList.contains("locked");
    return isCanvasLocked ? "lock_outline" : "lock_open";
  },
  action: (event) =&gt; {
    // toggle locked class to lock or unlock canvas
    event.target.classList.toggle("locked");
  }
}];

items.forEach(CanvasContextMenu.addItem);</pre></div></div>